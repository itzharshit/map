{"version":3,"sources":["RUTA.png","TitleScreen.js","MapScreen.js","withTransition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Page","styled","div","Header","Logo","Form","form","AddressField","TextField","attrs","variant","RemoveIconButton","IconButton","Stop","AddIcon","AddCircleOutlineIcon","color","green1","RemoveIcon","RemoveCircleOutlineIcon","Divider","HR","DoneButton","Button","green","TitleScreen","next","React","useState","origin","setOrigin","destination","setDestination","id","address","stops","setStops","removeStop","filter","stop","src","logo","alt","Typography","label","required","onChange","e","target","value","map","key","placeholder","size","onClick","length","fontSize","type","defaultValue","moment","format","substring","InputLabelProps","shrink","waypoints","Card","CardItem","StyledMap","Map","GoButton","toMiles","meters","toFixed","GoogleApiWrapper","apiKey","process","google","card","setCard","useEffect","request","waypoint","location","stopover","optimizeWaypoints","provideRouteAlternatives","travelMode","drivingOptions","departureTime","Date","trafficModel","unitSystem","maps","UnitSystem","IMPERIAL","DirectionsService","route","res","status","routes","timeInSeconds","legs","leg","duration","reduce","total","val","routeWaypoints","waypoint_order","i","time","Math","ceil","as","distance","path","join","link","encodeURI","component","href","pose","from","x","moveLeft","enter","transition","ease","exit","Container","withTransition","Component","posed","forwardRef","passThrough","ref","theme","createMuiTheme","typography","fontFamily","palette","primary","main","light","secondary","red","PosedTitleScreen","PosedMapScreen","MapScreen","App","screen","setScreen","screens","info","ThemeProvider","StylesProvider","injectFirst","preEnterPose","ReactDOM","render","document","getElementById","Boolean","window","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47e9fda5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RUTA.291a401a.png\";","import React from \"react\";\nimport logo from \"./RUTA.png\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nimport {\n   Button,\n   Divider as HR,\n   Typography,\n   TextField,\n   IconButton,\n} from \"@material-ui/core\";\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\n\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\n\nimport {color} from \"./constants\";\n\nconst Page = styled.div`\n   height: 100%;\n   width: 100%;\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n`;\n\nconst Header = styled.div`\n   display: flex;\n   flex-flow: column nowrap;\n   justify-content: center;\n   align-items: center;\n   padding: 24px 0;\n   img {\n      top: -3px;\n      left: -64px;\n      width: 128px;\n   }\n`;\n\nconst Logo = styled.div`\n   display: flex;\n   flex-flow: row nowrap;\n   justify-content: center;\n`;\n\nconst Form = styled.form`\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n`;\n\nconst AddressField = styled(TextField).attrs({variant: \"outlined\"})`\n   margin: 8px 0;\n`;\n\nconst RemoveIconButton = styled(IconButton)``;\n\nconst Stop = styled.div`\n   position: relative;\n   ${RemoveIconButton} {\n      position: absolute;\n      top: 22px;\n      right: -36px;\n   }\n`;\n\nconst AddIcon = styled(AddCircleOutlineIcon)`\n   color: ${color.green1};\n`;\n\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\n   color: ${color.green1};\n`;\n\nconst Divider = styled(HR)`\n   height: 5px;\n`;\n\nconst DoneButton = styled(Button)`\n   background: ${color.green};\n   color: white;\n   margin: 24px 0;\n   height: 48px;\n\n   &:hover {\n      background: ${color.green1};\n   }\n`;\n\nfunction TitleScreen({next}) {\n   const [origin, setOrigin] = React.useState(\"\");\n   const [destination, setDestination] = React.useState(\"\");\n   const [stops, setStops] = React.useState([{id: 0, address: \"\"}]);\n\n   const changeOrigin = e => setOrigin(e.target.value);\n   const changeDestination = e => setDestination(e.target.value);\n   const changeStop = id => e => {\n      setStops(\n         stops.map(stop =>\n            stop.id === id ? {id: id, address: e.target.value} : stop,\n         ),\n      );\n   };\n\n   const addStop = () => {\n      setStops([...stops, {id: stops[stops.length - 1].id + 1, address: \"\"}]);\n   };\n\n   const removeStop = id => () => {\n      setStops(stops.filter(stop => stop.id !== id));\n   };\n\n   return (\n      <Page>\n         <Header>\n            <img src={logo} alt=\"logo\" />\n            <Logo>\n               <Typography variant=\"h2\" color=\"primary\">\n                  RUTA\n               </Typography>\n            </Logo>\n            <Typography variant=\"h6\" color=\"secondary\">\n               Mapped solution â€” no sweat\n            </Typography>\n         </Header>\n         <Form>\n            <Typography variant=\"h6\" color=\"primary\">\n               Where do you plan to go?\n            </Typography>\n            <AddressField\n               label=\"From\"\n               required\n               color=\"secondary\"\n               onChange={changeOrigin}\n            />\n            {stops.map(stop => (\n               <Stop key={stop.id}>\n                  <AddressField\n                     value={stop.address}\n                     label=\"Stop\"\n                     placeholder=\"...\"\n                     onChange={changeStop(stop.id)}\n                  />\n                  <RemoveIconButton size=\"small\" onClick={removeStop(stop.id)}>\n                     <RemoveIcon />\n                  </RemoveIconButton>\n               </Stop>\n            ))}\n            <IconButton onClick={addStop}>\n               <AddIcon fontSize=\"large\" />\n            </IconButton>\n            <AddressField\n               label=\"To\"\n               required\n               color=\"secondary\"\n               onChange={changeDestination}\n            />\n\n            <Divider />\n\n            <Typography variant=\"h6\" color=\"primary\">\n               Depart at?\n            </Typography>\n            <AddressField\n               label=\"Time\"\n               type=\"datetime-local\"\n               // defaultValue=\"2017-05-24T10:30\"\n               defaultValue={moment()\n                  .format()\n                  .substring(0, 16)}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n            />\n            <DoneButton\n               onClick={next({\n                  origin: origin,\n                  destination: destination,\n                  waypoints: stops.map(stop => stop.address),\n               })}>\n               Show my fastest route!\n            </DoneButton>\n         </Form>\n      </Page>\n   );\n}\n\nexport default TitleScreen;\n","import React from \"react\";\nimport logo from \"./RUTA.png\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport {color} from \"./constants\";\n\nimport {Map, GoogleApiWrapper, Marker} from \"google-maps-react\";\n\nimport {\n   Button,\n   Divider as HR,\n   Typography,\n   TextField,\n   IconButton,\n} from \"@material-ui/core\";\n\nconst Page = styled.div`\n   height: 100%;\n   width: 100%;\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n   overflow: visible;\n`;\n\nconst Card = styled.div`\n   display: flex;\n   flex-flow: row nowrap;\n   width: 100%;\n   height: 150px;\n   position: absolute;\n   bottom: 0;\n   left: 0;\n   background: white;\n   justify-content: space-between;\n   align-items: center;\n`;\n\nconst CardItem = styled.div`\n   flex: 1;\n   display: flex;\n   flex-flow: column nowrap;\n   padding: 24px;\n`;\nconst StyledMap = styled(Map)`\n`;\n\nconst GoButton = styled(Button)`\n   color: white;\n   background: ${color.green};\n   &:hover {\n      background: ${color.green1};\n   }\n`;\n\nconst toMiles = meters => (meters * 0.000621371192).toFixed(2);\n\nfunction MapScreen({google, stops}) {\n   const [card, setCard] = React.useState(null);\n   React.useEffect(() => {\n      const request = {\n         origin: stops.origin,\n         destination: stops.destination,\n         waypoints: stops.waypoints.map(waypoint => ({\n            location: waypoint,\n            stopover: true,\n         })),\n         optimizeWaypoints: true,\n         provideRouteAlternatives: false,\n         travelMode: \"DRIVING\",\n         drivingOptions: {\n            departureTime: new Date(/* now, or future date */),\n            trafficModel: \"pessimistic\",\n         },\n         unitSystem: google.maps.UnitSystem.IMPERIAL,\n      };\n\n      new google.maps.DirectionsService().route(request, (res, status) => {\n         if (status === \"OK\") {\n            const route = res.routes[0];\n            const timeInSeconds = route.legs\n               .map(leg => leg.duration.value)\n               .reduce((total, val) => total + val, 0);\n            const routeWaypoints = route.waypoint_order.map(\n               i => stops.waypoints[i],\n            );\n            setCard({\n               time:\n                  Math.ceil(\n                     moment.duration(timeInSeconds, \"seconds\").as(\"minutes\"),\n                  ) + \" min\",\n               distance:\n                  toMiles(\n                     route.legs\n                        .map(leg => leg.distance.value)\n                        .reduce((total, val) => total + val, 0),\n                  ) + \" mi\",\n               path: [stops.origin, ...routeWaypoints, stops.destination].join(\n                  \" -> \",\n               ),\n               link: `https://www.google.com/maps/dir/?api=1&origin=${encodeURI(\n                  stops.origin,\n               )}&destination=${encodeURI(\n                  stops.destination,\n               )}&waypoints=${encodeURI(routeWaypoints.join(\"|\"))}`,\n            });\n         }\n      });\n   }, []);\n\n   return (\n      <Page>\n         <StyledMap google={google}></StyledMap>\n         {card && (\n            <Card>\n               <CardItem>\n                  <Typography variant=\"h5\" color=\"primary\">\n                     {card.time}\n                  </Typography>\n                  <Typography color=\"secondary\">{card.distance}</Typography>\n                  <Typography>{card.path}</Typography>\n               </CardItem>\n               <CardItem>\n                  <GoButton component=\"a\" href={card.link}>\n                     GO\n                  </GoButton>\n               </CardItem>\n            </Card>\n         )}\n      </Page>\n   );\n}\n\nexport default GoogleApiWrapper({\n   apiKey: `${process.env.REACT_APP_GOOGLE_API_KEY}`,\n})(MapScreen);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport posed from \"react-pose\";\n\nconst pose = {\n   from: {\n      x: ({moveLeft}) => (moveLeft ? \"100vw\" : \"-100vw\"),\n   },\n   enter: {\n      x: 0,\n      transition: {\n         ease: \"linear\",\n         duration: 200,\n      },\n   },\n   exit: {\n      x: ({moveLeft}) => (moveLeft ? \"-100vw\" : \"100vw\"),\n      transition: {\n         ease: \"linear\",\n         duration: 200,\n      },\n   },\n};\n\nconst Container = styled.div`\n   height: 100%;\n   width: 100%;\n   position: absolute;\n`;\n\nfunction withTransition(Component) {\n   return posed(\n      React.forwardRef((passThrough, ref) => (\n         <Container ref={ref}>\n            <Component {...passThrough} />\n         </Container>\n      )),\n   )(pose);\n}\n\nexport default withTransition;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\nimport {StylesProvider} from \"@material-ui/styles\";\nimport {ThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\nimport {color} from \"./constants\";\nimport Div100vh from \"react-div-100vh\";\nimport \"typeface-rubik\";\nimport TitleScreen from \"./TitleScreen\";\nimport MapScreen from \"./MapScreen\";\nimport withTransition from \"./withTransition\";\n\nimport {PoseGroup} from \"react-pose\";\n\nconst theme = createMuiTheme({\n   typography: {\n      fontFamily: \"Rubik\",\n   },\n   palette: {\n      primary: {\n         main: color.green,\n         light: color.green1,\n      },\n      secondary: {\n         main: color.red,\n      },\n   },\n});\n\nconst PosedTitleScreen = withTransition(TitleScreen);\nconst PosedMapScreen = withTransition(MapScreen);\n\nfunction App() {\n   const [screen, setScreen] = React.useState(0);\n   const [stops, setStops] = React.useState(null);\n   const submit = (info) => () => {\n      setStops(info);\n      setScreen(1);\n   };\n\n   const screens = [\n      <PosedTitleScreen key={0} next={submit} />,\n      <PosedMapScreen key={1} stops={stops}/>,\n   ];\n\n   return (\n      <ThemeProvider theme={theme}>\n         <StylesProvider injectFirst>\n            <Div100vh>\n               <PoseGroup preEnterPose=\"from\" moveLeft>\n                  {screens[screen]}\n               </PoseGroup>\n            </Div100vh>\n         </StylesProvider>\n      </ThemeProvider>\n   );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}