{"version":3,"sources":["TitleScreen.js","MapScreen.js","withTransition.js","App.js","serviceWorker.js","index.js","RUTA.png"],"names":["Geocode","setApiKey","setLanguage","enableDebug","Page","styled","div","Header","Logo","Form","form","AddressField","TextField","attrs","variant","RemoveIconButton","IconButton","Stop","AddIcon","AddCircleOutlineIcon","color","green1","RemoveIcon","RemoveCircleOutlineIcon","Divider","HR","DoneButton","Button","green","getCoord","address","res","fromAddress","then","response","results","geometry","location","lat","lng","error","console","GoogleApiWrapper","apiKey","next","React","useState","start","setStart","end","setEnd","id","stops","setStops","changeStartEnd","e","val","target","value","resObj","obj","coords","removeStop","filter","stop","src","logo","alt","Typography","label","required","onChange","map","key","placeholder","newStop","size","onClick","newId","length","push","fontSize","type","defaultValue","moment","format","substring","InputLabelProps","shrink","Card","CardItem","StyledMap","Map","GoButton","data","google","cards","time","distance","path","join","link","encodeURI","initialCenter","name","position","card","component","href","pose","from","x","moveLeft","enter","transition","ease","duration","exit","Container","withTransition","Component","posed","forwardRef","passThrough","ref","theme","createMuiTheme","typography","fontFamily","palette","primary","main","light","secondary","red","PosedTitleScreen","TitleScreen","PosedMapScreen","MapScreen","App","screen","setScreen","setData","screens","log","ThemeProvider","StylesProvider","injectFirst","preEnterPose","ReactDOM","render","document","getElementById","Boolean","window","hostname","match","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cfd46c83.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./RUTA.png\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport {GoogleApiWrapper} from \"google-maps-react\";\nimport Geocode from \"react-geocode\";\n\nimport {\n   Button,\n   Divider as HR,\n   Typography,\n   TextField,\n   IconButton,\n} from \"@material-ui/core\";\nimport {KeyboardDatePicker} from \"@material-ui/pickers\";\n\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\n\nimport {color} from \"./constants\";\n\nGeocode.setApiKey(\"AIzaSyA8O9T0kXIML1T2y9F0UorRWZ-P43zCSmc\");\n\nGeocode.setLanguage(\"en\");\n\nGeocode.enableDebug();\n\nconst Page = styled.div`\n   height: 100%;\n   width: 100%;\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n`;\n\nconst Header = styled.div`\n   display: flex;\n   flex-flow: column nowrap;\n   justify-content: center;\n   align-items: center;\n   padding: 24px 0;\n   img {\n      top: -3px;\n      left: -64px;\n      width: 128px;\n   }\n`;\n\nconst Logo = styled.div`\n   display: flex;\n   flex-flow: row nowrap;\n   justify-content: center;\n`;\n\nconst Form = styled.form`\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n`;\n\nconst AddressField = styled(TextField).attrs({variant: \"outlined\"})`\n   margin: 8px 0;\n`;\n\nconst RemoveIconButton = styled(IconButton)``;\n\nconst Stop = styled.div`\n   position: relative;\n   ${RemoveIconButton} {\n      position: absolute;\n      top: 22px;\n      right: -36px;\n   }\n`;\n\nconst AddIcon = styled(AddCircleOutlineIcon)`\n   color: ${color.green1};\n`;\n\nconst RemoveIcon = styled(RemoveCircleOutlineIcon)`\n   color: ${color.green1};\n`;\n\nconst Divider = styled(HR)`\n   height: 5px;\n`;\n\nconst DoneButton = styled(Button)`\n   background: ${color.green};\n   color: white;\n   margin: 24px 0;\n   height: 48px;\n\n   &:hover {\n      background: ${color.green1};\n   }\n`;\n\nconst getCoord = (address, res) => {\n   Geocode.fromAddress(address).then(\n      response => {\n         const {lat, lng} = response.results[0].geometry.location;\n         res({lat, lng});\n      },\n      error => {\n         console.error(error);\n      },\n   );\n};\n\nfunction TitleScreen({next}) {\n   const [start, setStart] = React.useState();\n   const [end, setEnd] = React.useState();\n   const [stops, setStops] = React.useState([{id: 0, address: \"\"}]);\n\n   const changeStartEnd = start => e => {\n      const val = e.target.value;\n      const resObj = {address: val};\n      getCoord(val, obj => (resObj.coords = obj));\n      start ? setStart(resObj) : setEnd(resObj);\n   };\n\n   const changeStop = id => e => {\n      setStops(\n         stops.map(stop => {\n            if (stop.id !== id) {\n               return stop;\n            }\n            const newStop = {id: id, address: e.target.value};\n            getCoord(e.target.value, obj => (newStop.coords = obj));\n            return newStop;\n         }),\n      );\n   };\n\n   const addStop = () => {\n      const newId = stops[stops.length - 1].id + 1;\n      stops.push({id: newId, address: \"\"});\n      setStops([...stops]);\n   };\n\n   const removeStop = id => () => {\n      setStops(stops.filter(stop => stop.id !== id));\n   };\n\n   return (\n      <Page>\n         <Header>\n            <img src={logo} alt=\"logo\" />\n            <Logo>\n               <Typography variant=\"h2\" color=\"primary\">\n                  RUTA\n               </Typography>\n            </Logo>\n            <Typography variant=\"h6\" color=\"secondary\">\n               Mapped solution — no sweat\n            </Typography>\n         </Header>\n         <Form>\n            <Typography variant=\"h6\" color=\"primary\">\n               Where do you plan to go?\n            </Typography>\n            <AddressField\n               label=\"From\"\n               required\n               color=\"secondary\"\n               onChange={changeStartEnd(true)}\n            />\n            {stops.map(stop => (\n               <Stop key={stop.id}>\n                  <AddressField\n                     value={stop.address}\n                     label=\"Stop\"\n                     placeholder=\"...\"\n                     onChange={changeStop(stop.id)}\n                  />\n                  <RemoveIconButton size=\"small\" onClick={removeStop(stop.id)}>\n                     <RemoveIcon />\n                  </RemoveIconButton>\n               </Stop>\n            ))}\n            <IconButton onClick={addStop}>\n               <AddIcon fontSize=\"large\" />\n            </IconButton>\n            <AddressField\n               label=\"To\"\n               required\n               color=\"secondary\"\n               onChange={changeStartEnd(false)}\n            />\n\n            <Divider />\n\n            <Typography variant=\"h6\" color=\"primary\">\n               Depart at?\n            </Typography>\n            <AddressField\n               label=\"Time\"\n               type=\"datetime-local\"\n               // defaultValue=\"2017-05-24T10:30\"\n               defaultValue={moment()\n                  .format()\n                  .substring(0, 16)}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n            />\n            <DoneButton onClick={next({start: start, stops: stops, end: end})}>\n               Show my fastest route!\n            </DoneButton>\n         </Form>\n      </Page>\n   );\n}\n\nexport default GoogleApiWrapper({\n   apiKey: \"AIzaSyA8O9T0kXIML1T2y9F0UorRWZ-P43zCSmc\",\n})(TitleScreen);\n","import React from \"react\";\nimport logo from \"./RUTA.png\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport {color} from \"./constants\";\n\nimport {Map, GoogleApiWrapper, Marker} from \"google-maps-react\";\n\nimport {\n   Button,\n   Divider as HR,\n   Typography,\n   TextField,\n   IconButton,\n} from \"@material-ui/core\";\n\nconst Page = styled.div`\n   height: 100%;\n   width: 100%;\n   display: flex;\n   flex-flow: column nowrap;\n   align-items: center;\n   overflow: visible;\n   postion: relative;\n`;\n\nconst Card = styled.div`\n   display: flex;\n   flex-flow: row nowrap;\n   width: 100%;\n   height: 150px;\n   position: absolute;\n   bottom: 0;\n   left: 0;\n   background: white;\n   justify-content: space-between;\n   align-items: center;\n`;\n\nconst CardItem = styled.div`\n   flex: 1;\n   display: flex;\n   flex-flow: column nowrap;\n   padding: 24px;\n`;\nconst StyledMap = styled(Map)``;\n\nconst GoButton = styled(Button)`\n   color: white;\n   background: ${color.green};\n   &:hover {\n      background: ${color.green1};\n   }\n`;\nfunction MapScreen({data, google}) {\n   const cards = [\n      {\n         time: \"17 min\",\n         distance: \"5.4 mi\",\n         path: `${data.start.address} -> ${data.stops\n            .map(stop => stop.address)\n            .join(\" -> \")} -> ${data.end.address}`,\n         link: `https://www.google.com/maps/dir/?api=1&origin=${encodeURI(\n            data.start.address,\n         )}&destination=${encodeURI(data.end.address)}&waypoints=${encodeURI(\n            data.stops.map(stop => stop.address).join(\"|\"),\n         )}`,\n         coords: data.start.coords,\n      },\n   ];\n\n   return (\n      <Page>\n         <StyledMap\n            google={google}\n            initialCenter={{\n               lat: 35.257296,\n               lng: -120.687276,\n            }}>\n            <Marker\n               name={data.start.address}\n               position={{\n                  lat: data.start.coords.lat,\n                  lng: data.start.coords.lng,\n               }}\n            />\n            {data.stops.map(stop => (\n               <Marker\n                  name={stop.address}\n                  position={{lat: stop.coords.lat, lng: stop.coords.lng}}\n               />\n            ))}\n            <Marker\n               name={data.end.address}\n               position={{lat: data.end.coords.lat, lng: data.end.coords.lng}}\n            />\n         </StyledMap>\n         {cards.map(card => (\n            <Card key={card}>\n               <CardItem>\n                  <Typography variant=\"h5\" color=\"primary\">\n                     {card.time}\n                  </Typography>\n                  <Typography color=\"secondary\">{card.distance}</Typography>\n                  <Typography>{card.path}</Typography>\n               </CardItem>\n               <CardItem>\n                  <GoButton component=\"a\" href={card.link}>\n                     GO\n                  </GoButton>\n               </CardItem>\n            </Card>\n         ))}\n      </Page>\n   );\n}\n\nexport default GoogleApiWrapper({\n   apiKey: \"AIzaSyA8O9T0kXIML1T2y9F0UorRWZ-P43zCSmc\",\n})(MapScreen);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport posed from \"react-pose\";\n\nconst pose = {\n   from: {\n      x: ({moveLeft}) => (moveLeft ? \"100vw\" : \"-100vw\"),\n   },\n   enter: {\n      x: 0,\n      transition: {\n         ease: \"linear\",\n         duration: 200,\n      },\n   },\n   exit: {\n      x: ({moveLeft}) => (moveLeft ? \"-100vw\" : \"100vw\"),\n      transition: {\n         ease: \"linear\",\n         duration: 200,\n      },\n   },\n};\n\nconst Container = styled.div`\n   height: 100%;\n   width: 100%;\n   position: absolute;\n`;\n\nfunction withTransition(Component) {\n   return posed(\n      React.forwardRef((passThrough, ref) => (\n         <Container ref={ref}>\n            <Component {...passThrough} />\n         </Container>\n      )),\n   )(pose);\n}\n\nexport default withTransition;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\nimport {StylesProvider} from \"@material-ui/styles\";\nimport {ThemeProvider, createMuiTheme} from \"@material-ui/core/styles\";\nimport {color} from \"./constants\";\nimport Div100vh from \"react-div-100vh\";\nimport \"typeface-rubik\";\nimport TitleScreen from \"./TitleScreen\";\nimport MapScreen from \"./MapScreen\";\nimport withTransition from \"./withTransition\";\n\nimport {PoseGroup} from \"react-pose\";\n\nconst theme = createMuiTheme({\n   typography: {\n      fontFamily: \"Rubik\",\n   },\n   palette: {\n      primary: {\n         main: color.green,\n         light: color.green1,\n      },\n      secondary: {\n         main: color.red,\n      },\n   },\n});\n\nconst PosedTitleScreen = withTransition(TitleScreen);\nconst PosedMapScreen = withTransition(MapScreen);\n\nfunction App() {\n   const [screen, setScreen] = React.useState(0);\n   const [data, setData] = React.useState();\n   const nextScreen = res => () => {\n      setScreen(screen + 1);\n      setData(res);\n   };\n\n   const screens = [\n      <PosedTitleScreen key={0} next={nextScreen} />,\n      <PosedMapScreen key={1} data={data}/>,\n   ];\n   console.log(screen);\n   return (\n      <ThemeProvider theme={theme}>\n         <StylesProvider injectFirst>\n            <Div100vh>\n               <PoseGroup preEnterPose=\"from\" moveLeft>\n                  {screens[screen]}\n               </PoseGroup>\n            </Div100vh>\n         </StylesProvider>\n      </ThemeProvider>\n   );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/RUTA.291a401a.png\";"],"sourceRoot":""}